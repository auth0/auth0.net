name: Create NuGet and GitHub Release

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

### TODO: Replace instances of './.github/workflows/' w/ `auth0/dx-sdk-actions/workflows` and append `@latest` after the common `dx-sdk-actions` repo is made public.
### TODO: Also remove `get-prerelease`, `get-release-notes`, `get-version`, `nuget-publish`, `release-create`, and `tag-exists` actions from this repo's .github/actions folder once the repo is public.
### TODO: Also remove `nuget-release` workflow from this repo's .github/workflows folder once the repo is public.

jobs:
  rl-scanner-core:
    uses: ./.github/workflows/rl-secure.yml
    with:
      project-path: "src/Auth0.Core/Auth0.Core.csproj"
      artifact-name: "Auth0.Core.tgz"
    secrets:
      RLSECURE_LICENSE: ${{ secrets.RLSECURE_LICENSE }}
      RLSECURE_SITE_KEY: ${{ secrets.RLSECURE_SITE_KEY }}
      SIGNAL_HANDLER_TOKEN: ${{ secrets.SIGNAL_HANDLER_TOKEN }}
      PRODSEC_TOOLS_USER: ${{ secrets.PRODSEC_TOOLS_USER }}
      PRODSEC_TOOLS_TOKEN: ${{ secrets.PRODSEC_TOOLS_TOKEN }}
      PRODSEC_TOOLS_ARN: ${{ secrets.PRODSEC_TOOLS_ARN }}

  rl-scanner-authentication:
    uses: ./.github/workflows/rl-secure.yml
    with:
      project-path: "src/Auth0.AuthenticationApi/Auth0.AuthenticationApi.csproj"
      artifact-name: "Auth0.AuthenticationApi.tgz"
    secrets:
      RLSECURE_LICENSE: ${{ secrets.RLSECURE_LICENSE }}
      RLSECURE_SITE_KEY: ${{ secrets.RLSECURE_SITE_KEY }}
      SIGNAL_HANDLER_TOKEN: ${{ secrets.SIGNAL_HANDLER_TOKEN }}
      PRODSEC_TOOLS_USER: ${{ secrets.PRODSEC_TOOLS_USER }}
      PRODSEC_TOOLS_TOKEN: ${{ secrets.PRODSEC_TOOLS_TOKEN }}
      PRODSEC_TOOLS_ARN: ${{ secrets.PRODSEC_TOOLS_ARN }}

  rl-scanner-management:
    uses: ./.github/workflows/rl-secure.yml
    with:
      project-path: "src/Auth0.ManagementApi/Auth0.ManagementApi.csproj"
      artifact-name: "Auth0.ManagementApi.tgz"
    secrets:
      RLSECURE_LICENSE: ${{ secrets.RLSECURE_LICENSE }}
      RLSECURE_SITE_KEY: ${{ secrets.RLSECURE_SITE_KEY }}
      SIGNAL_HANDLER_TOKEN: ${{ secrets.SIGNAL_HANDLER_TOKEN }}
      PRODSEC_TOOLS_USER: ${{ secrets.PRODSEC_TOOLS_USER }}
      PRODSEC_TOOLS_TOKEN: ${{ secrets.PRODSEC_TOOLS_TOKEN }}
      PRODSEC_TOOLS_ARN: ${{ secrets.PRODSEC_TOOLS_ARN }}

  release:
    needs: [rl-scanner-core, rl-scanner-authentication, rl-scanner-management]
    uses: ./.github/workflows/nuget-release.yml
    with:
      dotnet-version: 8.0.x
      project-paths: "['src/Auth0.Core/Auth0.Core.csproj', 'src/Auth0.AuthenticationApi/Auth0.AuthenticationApi.csproj', 'src/Auth0.ManagementApi/Auth0.ManagementApi.csproj']"
    secrets:
      nuget-token: ${{ secrets.NUGET_APIKEY }}
      github-token: ${{ secrets.GITHUB_TOKEN }}

  generate-docs:
    name: Generate API docs
    needs: [rl-scanner-core, rl-scanner-authentication, rl-scanner-management]
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged && startsWith(github.event.pull_request.head.ref, 'release/'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install DocFX
        run: dotnet tool install -g docfx        

      - name: Build docs
        run: docfx docs-source/docfx.json        

      - name: Uploading Artifacts
        uses: actions/upload-pages-artifact@v4
        with:
          path: docs

  deploy-docs:
    needs: generate-docs
    name: Deploy API docs
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged && startsWith(github.event.pull_request.head.ref, 'release/'))

    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # or specific "vX.X.X" version tag for this action
